#pragma once
#include <Arduino.h>        // Подключаем основную библиотеку Arduino, содержащую базовые функции (setup, loop, millis и пр.)
#include <SoftwareSerial.h> // Подключаем библиотеку SoftwareSerial для создания программного UART на произвольных пинах

// Определяем константы для протокола обмена данными
#define HEADER 0xAA // Определяем заголовок пакета (начальный байт), равный 0xAA
#define ACK 0x55    // Определяем байт подтверждения (ACK), равный 0x55
#define NACK 0xFF   // Определяем байт отрицательного подтверждения (NACK), равный 0xFF

// Определяем флаг пакета: если установлен, то пакет требует подтверждения (ACK)
#define FLAG_NEEDS_ACK 0x01 // Флаг, обозначающий, что пакет требует подтверждения (1 байт флагов)

// Перечисление возможных состояний протокола
enum ProtocolState
{
    STATE_IDLE,    // Состояние ожидания: нет активной передачи, система простаивает
    STATE_WAIT_ACK // Состояние ожидания подтверждения: пакет отправлен, ждём ACK или NACK
};

// Объявляем класс SerialProtocol для организации асинхронного обмена данными
class SerialProtocol
{
public:
    // Конструктор класса, который принимает ссылку на объект SoftwareSerial
    SerialProtocol(SoftwareSerial &);

    unsigned long ackTimeout_ms = 1000; // Время (в миллисекундах) до которого ожидаем подтверждения (ACK)

    // Метод begin() инициализирует SoftwareSerial на заданной скорости (baud rate)
    void begin(unsigned long );

    // Немедленная (неблокирующая) отправка пакета с возможностью установки флага, требующего подтверждения
    // data - указатель на массив с полезными данными
    // length - длина полезных данных
    // needsAck - булевское значение: true, если пакет требует подтверждения, false если не требует
    void sendPacketNonBlocking(uint8_t *, uint8_t , bool );

    // Метод update() должен вызываться в основном цикле (loop) для:
    // - Чтения входящих данных из SoftwareSerial
    // - Формирования пакета из полученных байтов
    // - Обработки полученного пакета (подтверждения или команд)
    // - Управления состоянием ожидания подтверждения (проверка таймаута)
    void update();

private:
    SoftwareSerial &serial;   // Ссылка на объект SoftwareSerial для обмена данными
    ProtocolState state;      // Переменная, хранящая текущее состояние протокола (IDLE или WAIT_ACK)
    unsigned long ackTimeout; // Время (в миллисекундах) до которого ожидаем подтверждения (ACK)
    uint8_t rxBuffer[32];     // Буфер для хранения входящих байтов данных
    uint8_t rxIndex;          // Индекс текущей позиции в буфере приёма
    bool packetReady;         // Флаг, указывающий, что получен полный пакет и он готов к обработке

    // Метод crc8() вычисляет CRC-8 для входящего массива данных
    // data - указатель на массив данных, len - длина данных, для которых вычисляется контрольная сумма
    uint8_t crc8(const uint8_t *, uint8_t);
};